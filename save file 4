#include <stdio.h>
//#include <stdbool.h>
//#include <stdlib.h>
#include <math.h>
#define SIZE 35

int getSortOption(); //retrieves the input for the sorting option 
int getArray(int, int opt1input[SIZE], int opt2input[SIZE]); //retrieves and stores the elements from the input array
void option1CALC(int opt1input[SIZE], int);
//void option2CALC(int opt1input[SIZE], int);

int main()
{
    //int opt1input[35],opt2input[35],opt1CALC[35],opt2CALC[35];
    //int x,ans;
    //int cnt=0; //=size
    //int i=0;
    //int ch;
    //Declarations
    int sortoption; //input for the sorting option from user input 
    int size; //number of elements in the input array 
    //int inputarray[SIZE]; //array of elements inputted by the user
    int opt1input[SIZE];
    int opt2input[SIZE];
    int opt1CALC[SIZE];
    //int opt2CALC[SIZE];
    int index; 
    int temp;
    int applications1; //number of times the calculation is performed for option 1
    int applications2; //number of times the calculation is performed for option 2
    int possible;
    int POWER;
    
    //Input Section
    sortoption = getSortOption(); //retrieves the input for the sorting option
    size = getArray(sortoption, opt1input, opt2input); //retrieves and stores the elements from the input array

    //Calculation Section
    //swap(&xp, &yp);
    //bubbleSort1(opt1input, opt1CALC, size);
    //bubbleSort2(opt2input, opt2CALC, size);
    option1CALC(opt1input, size);
    //option2CALC(opt2input, size);
    //possible = isPowerOfTwo(opt2input, size);
    //POWER = power(opt2input, size);
    //applications2 = count2(opt2input, possible, POWER, size);
    
    /*for(index = 0; index < size; index++)
    {
        temp = applications1;
        opt1CALC[index] = temp;
    }
    
    for(index = 0; index < size; index++)
    {
        temp = applications2;
        opt2CALC[index] = temp;
    }
    */
    for(index = 0; index < size; ++ index)
    {
        //printf("%d", opt1input[index]);
        //printf("%d", opt2input[index]);
    }
    //bubbleSort1(opt1input,opt1CALC,size);
    //bubbleSort2(opt2input,opt2CALC,size);

    return 0;
}

int getSortOption(int sortoption)
{
    int option; //local variable for the sorting option input 
    
    do
    { 
        printf("Enter sorting option (1) count or (2) power of two -> ");
        scanf("%d", &option);
        
        if (option != 1 && option != 2)
        {
            printf("\nError! Enter option 1 or 2 only!\n\n");
        }
    } while (option != 1 && option != 2);
    
    sortoption = option;
    return(sortoption);
}

//FUNCTION HEADER - getArray
int getArray(int sortoption, int opt1input[SIZE], int opt2input[SIZE])
{
    int index; //local variable used for indexing
    int x; //local variable used for indexing
    int size; //local variable used for determining the size of the input array 
    size = 35;
    
    printf("Enter up to 35 integer values -> ");
    
    switch(sortoption)
    {
    case 1:
    {
    for(index = 0; index < 35; ++index)
    {
        scanf("%d", &x);
        if (x < 0)
        {
            size = index;
            index = 50;
        }
        opt1input[index] = x;
    }
    break;
    }
    
    case 2:
    {
    for(index = 0; index < 35; ++index)
    {
        scanf("%d", &x);
        if (x < 0)
        {
            size = index;
            index = 50;
        }
        opt2input[index] = x;
    }
    }
    }
    
    return(size);
}

/*void bubbleSort1(int opt1input[], int opt1CALC[] ,int size)
{
   int i;
   int j;
   int temp;
   int temporary;
   int t;
   int Temp;
   
   for (i = 0; i < size - 1; i++)      
   {
       // Last i elements are already in place   
       for (j = 0; j < size - i - 1; j++)
       {
           if (opt1CALC[j] > opt1CALC[j + 1])
           {
              temp = opt1input[j];
              opt1input[j] = opt1input[j + 1];
              opt1input[j + 1] = temp;
              
              temporary = opt1CALC[j];
              opt1CALC[j] = opt1CALC[j + 1];
              opt1CALC[j + 1] = temp;
              
              //swap(&opt2input[j], &opt2input[j + 1]);
              //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
           }
           
           else if(opt1CALC[j] == opt1CALC[j+1])
           {
               if(opt1input[j] > opt1input[j+1])
               {
                  t = opt1input[j];
                  opt2input[j] = opt1input[j + 1];
                  opt2input[j + 1] = t;
                  
                  Temp = opt1CALC[j];
                  opt1CALC[j] = opt1CALC[j + 1];
                  opt1CALC[j + 1] = Temp;
                  
                  //swap(&opt2input[j], &opt2input[j + 1]);
                  //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
               }
           }
       }
       printf("%d", opt1input[i]);
       printf(" %d", opt1CALC[i]);
   }
    return;
}*/

/*void bubbleSort1(int opt1input[], int opt1CALC[] ,int size)
{
   int i, j;
   for (i = 0; i < size - 1; i++)      
    {
       // Last i elements are already in place   
       for (j = 0; j < size - i - 1; j++)
       {
           if (opt1CALC[j] > opt1CALC[j+1])
           {
              
              swap(&opt1input[j], &opt1input[j+1]);
              swap(&opt1CALC[j], &opt1CALC[j+1]);
           }
           else if(opt1CALC[j] == opt1CALC[j+1])
           {
               if(opt1input[j] > opt1input[j+1])
               {
                  swap(&opt1input[j], &opt1input[j+1]);
                  swap(&opt1CALC[j], &opt1CALC[j+1]); 
               }
           }
       }
       printf("%d", opt1input[i])
    }
    return;
}

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
    return;
}*/

/*void bubbleSort2(int opt2input[], int opt2CALC[] ,int size)
{
   int i;
   int j;
   int temp;
   int temporary;
   int t;
   int Temp;
   
   for (i = 0; i < size - 1; i++)      
   {
       // Last i elements are already in place   
       for (j = 0; j < size - i - 1; j++)
       {
           if (opt2CALC[j] > opt2CALC[j + 1])
           {
              temp = opt2input[j];
              opt2input[j] = opt2input[j + 1];
              opt2input[j + 1] = temp;
              
              temporary = opt2CALC[j];
              opt2CALC[j] = opt2CALC[j + 1];
              opt2CALC[j + 1] = temp;
              
              //swap(&opt2input[j], &opt2input[j + 1]);
              //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
           }
           
           else if(opt2CALC[j] == opt2CALC[j+1])
           {
               if(opt2input[j] > opt2input[j+1])
               {
                  t = opt2input[j];
                  opt2input[j] = opt2input[j + 1];
                  opt2input[j + 1] = t;
                  
                  Temp = opt2CALC[j];
                  opt2CALC[j] = opt2CALC[j + 1];
                  opt2CALC[j + 1] = Temp;
                  
                  //swap(&opt2input[j], &opt2input[j + 1]);
                  //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
               }
           }
       }
       printf("%d", opt2input[i]);
       printf(" %d", opt2CALC[i]);
   }
    return;
}*/


void option1CALC(int opt1input[SIZE], int size)
{
    int applications1; //local variable that represents the number of times the calculation was performed
    int element; //local variable that represents the specific element of the array
    int index; //local variable used for indexing the loops
    int counter;
    int i;
    int j;
    int temp;
    int temporary;
    int t;
    int Temp;
    //int opt1input[SIZE];
    int opt1CALC[SIZE];
    applications1 = 0;
    
    for(counter = 0; counter < size; ++counter)
    {  
        element = opt1input[counter];
    while(element > 1 && counter < size) //is the calculation greater than 1?
    {
        if(element % 2 == 0) //is the element even?
        {
            element = element / 2;
        }
        else //is the element odd?
        {
            element = (element * 3) + 1;
        }
        
        applications1++;
    }
        temp = applications1;
        opt1CALC[counter] = temp;
    }

for (i= 0; i < size; i++)
{
  printf(" opt1CALCunsort = %d ", opt1CALC[i]);
}
    //from bubble sort 1
    for (i = 0; i < size; i++)      
    {
       // Last i elements are already in place   
       for (j = 0; j < size - i - 1; j++)
       //{
           if (opt1CALC[j] > opt1CALC[j + 1])
           {
              temp = opt1input[j];
              opt1input[j] = opt1input[j + 1];
              opt1input[j + 1] = temp;
              
              temporary = opt1CALC[j];
              opt1CALC[j] = opt1CALC[j + 1];
              opt1CALC[j + 1] = temp;
           }
           
           /*else if(opt1CALC[j] == opt1CALC[j + 1])
           {
               if(opt1input[j] > opt1input[j + 1])
               {
                  t = opt1input[j];
                  opt1input[j] = opt1input[j + 1];
                  opt1input[j + 1] = t;
                  
                  Temp = opt1CALC[j];
                  opt1CALC[j] = opt1CALC[j + 1];
                  opt1CALC[j + 1] = Temp;
                  
                  //swap(&opt2input[j], &opt2input[j + 1]);
                  //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
               }
           }*/
       //}
       printf("%d ", opt1input[i]);
      //printf(" %d", opt1CALC[i]);
   }
    
    return;
}

//CURRENT FUNCTION 
/*void option2CALC(int n[SIZE], int size)
{
    int i; //local variable used for indexing the loop 
    int element; //local variable that represents the element in the array
    int possible;
    //int i; //local variable used for indexing the loop 
    int ans; //local variable that represents the element in the array
    int POWER;
     //int i;
    int j;
    int temp;
    int po;
    int temporary;
    int t;
    int applications2;
    int index;
    int Temp;
    int opt2input[SIZE];
    int opt2CALC[SIZE];
    
    for(i = 0; i < size; ++i)
    {  
        element = n[i];
     if (element == 0)
    {
      possible = 0;
    }

    while (element != 1)
    {
      if (element % 2 != 0)
      {
         possible = 0;
         element = element/2;
      }
      else
      {
        possible = 1;
      }
  }
}
    //from power
    for(i = 0; i < size; ++i)
    { 
        ans = n[i];
    int POWER = 0;
    while(ans >1)
    { 
        ans /= 2; 
        POWER += 1;
    }
    }
    
    //from count2
    for(i = 0; i < size; ++i)
    { 
        element = n[i];
    while(element > 1)
    {
        if(element % 2 == 0)
        { 
            element = element / 2;
            po = possible;
            if(po == 1)
            {
                applications2 = POWER;                                                                                                                                                                    break;
            }
        }
        else 
        {
            element = (element * 3) + 1;
        }
        index++;
    }
    }
    
    //from main
    for(index = 0; index < size; index++)
    {
        temp = applications2;
        opt2CALC[index] = temp;
    }

//from bubble sort 2
   for (i = 0; i < size - 1; i++)      
   {
       // Last i elements are already in place   
       for (j = 0; j < size - i - 1; j++)
       {
           if (opt2CALC[j] > opt2CALC[j + 1])
           {
              temp = opt2input[j];
              opt2input[j] = opt2input[j + 1];
              opt2input[j + 1] = temp;
              
              temporary = opt2CALC[j];
              opt2CALC[j] = opt2CALC[j + 1];
              opt2CALC[j + 1] = temp;
              
              //swap(&opt2input[j], &opt2input[j + 1]);
              //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
           }
           
           else if(opt2CALC[j] == opt2CALC[j+1])
           {
               if(opt2input[j] > opt2input[j+1])
               {
                  t = opt2input[j];
                  opt2input[j] = opt2input[j + 1];
                  opt2input[j + 1] = t;
                  
                  Temp = opt2CALC[j];
                  opt2CALC[j] = opt2CALC[j + 1];
                  opt2CALC[j + 1] = Temp;
                  
                  //swap(&opt2input[j], &opt2input[j + 1]);
                  //swap(&opt2CALC[j], &opt2CALC[j + 1]); 
               }
           }
       }
       //printf("%d", opt2input[i]);
       //printf(" %d", opt2CALC[i]);
   }
   return;
}
*/

//IGNORE!!!!
/*int power(int n[SIZE], int size)
{
    int i; //local variable used for indexing the loop 
    int element; //local variable that represents the element in the array
    int POWER;
    
    for(i = 0; i < size; ++i)
    { 
        element = n[i];
    int POWER = 0;
    while(element >1)
    { 
        element /= 2; 
        POWER += 1;
    }
    }
    return POWER;
}*/

/*int count2(int n[SIZE], int possible, int POWER, int size)
{
    int index;
    index = 0;
    int po;
    int applications2;
    int i;
    int element;
    for(i = 0; i < size; ++i)
    { 
        element = n[i];
    while(element > 1)
    {
        if(element % 2 == 0)
        { 
            element = element / 2;
            po = possible;
            if(po == 1)
            {
                applications2 = POWER;                                                                                                                                                                    break;
            }
        }
        else 
        {
            element = (element * 3) + 1;
        }
        index++;
    }
    }
    return applications2;
}*/

