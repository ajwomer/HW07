#include <stdio.h>
#include<stdbool.h>
#include<math.h>
#define SIZE 35
int getSortOption(); //retrieves the input for the sorting option 
int getArray(int, int opt1input[SIZE], int opt2input[SIZE]); //retrieves and stores the elements from the input array
void swap(int *xp, int *yp);
void bubbleSort1(int opt1input[], int opt1CALC[], int size);
void bubbleSort2(int opt2input[], int opt2CALC[], int size);
int count1(int opt1input[]);
int count2(int opt2input[], int bo, int POWER);
bool isPowerOfTwo(int opt2input[]);
int power(int opt2input[]);

int main()
{
    //int opt1input[35],opt2input[35],opt1CALC[35],opt2CALC[35];
    int x,ans;
    int cnt=0; //=size
    int i=0;
    int ch;
    //Declarations
    int sortoption; //input for the sorting option from user input 
    int size; //number of elements in the input array 
    //int inputarray[SIZE]; //array of elements inputted by the user
    int opt1input[SIZE];
    int opt2input[SIZE];
    int opt1CALC[SIZE];
    int opt2CALC[SIZE];
    int index; 
    int temp;
    int c;
    int pof;
    int bo;
    int POWER;
    
    //Input Section
    sortoption = getSortOption(); //retrieves the input for the sorting option
    size = getArray(sortoption, opt1input, opt2input); //retrieves and stores the elements from the input array

    //Calculation Section
    //swap(&xp, &yp);
    bubbleSort1(opt1input, opt1CALC, size);
    bubbleSort2(opt2input, opt2CALC, size);
    c = count1(opt1input);
    bo = isPowerOfTwo(opt2input);
    POWER = power(opt2input);
    pof = count2(opt2input, bo, POWER);
    
    for(index = 0; index < size; index++)
    {
        temp = c;
        opt1CALC[index] = temp;
    }
    
    for(index = 0; index < size; index++)
    {
        temp = pof;
        opt2CALC[index] = temp;
    }
    
    bubbleSort1(opt1input,opt1CALC,size);
    bubbleSort2(opt2input,opt2CALC,size);
    
    /*scanf("%d", &ch);
    switch(ch)
    {
        case 1:
        while(1){
        scanf("%d", &x);
        if(x == -1)
        {
            break;
        }
        else
        {
            arr[i]=x;
            i+=1;
            cnt+=1;
        }
        
    }
    
    for(int i=0;i<cnt;i++)
    {
        ans=count(arr[i]);
        a[i]=ans;
    }
    
    bubbleSort(arr,a,cnt); //declaration 
    
    for(int i=0;i<cnt;i++)
    {
       printf("%d",arr[i]);
       printf("\n");
    }
        break;
        case 2:
          while(1)
          {
          scanf("%d", &x);
          if(x == -1)
          {
            break;
          }
          else
          {
            brr[i]=x;
            i+=1;
            cnt+=1;
          }
        
    }
    for(int i=0;i<cnt;i++)
    {
        ans=count1(brr[i]);
        b[i]=ans;
    }
    
    bubbleSort(brr,b,cnt); //declaration
        for(int i=0;i<cnt;i++)
        {
         printf("%d",brr[i]);
       printf("\n");
        }
        break;
        default:
        printf("Error! Enter option 1 or 2 only!\n");
        
    }
    */
 
    return 0;
}

int getSortOption(int sortoption)
{
    int option; //local variable for the sorting option input 
    do
    { 
        printf("Enter sorting option (1) count or (2) power of two -> ");
        scanf("%d", &option);
        
        if (option != 1 && option != 2)
        {
            printf("\nError! Enter option 1 or 2 only!\n\n");
        }
    } while (option != 1 && option != 2);
    
    sortoption = option;
    return(sortoption);
}

//FUNCTION HEADER - getArray
int getArray(int sortoption, int opt1input[SIZE], int opt2input[SIZE])
{
    int index; //local variable used for indexing
    int x; //local variable used for indexing
    int size; //local variable used for determining the size of the input array 
    size = 35;
    
    printf("Enter up to 35 integer values -> ");
    
    switch(sortoption)
    case 1:
    {
    for(index = 0; index < 35; ++index)
    {
        scanf("%d", &x);
        if (x < 0)
        {
            size = index;
            index = 50;
        }
        opt1input[index] = x;
    }
    
    case 2:
    {
    for(index = 0; index < 35; ++index)
    {
        scanf("%d", &x);
        if (x < 0)
        {
            size = index;
            index = 50;
        }
        opt2input[index] = x;
    }
    
    }
    
    return(size);
}

void bubbleSort1(int opt1input[], int opt1CALC[] ,int size)
{
   int i, j;
   for (i = 0; i < size - 1; i++)      
  
       // Last i elements are already in place   
       for (j = 0; j < size - i - 1; j++)
       {
           if (opt1CALC[j] > opt1CALC[j+1])
           {
              swap(&opt1input[j], &opt1input[j+1]);
              swap(&opt1CALC[j], &opt1CALC[j+1]);
           }
           else if(opt1CALC[j] == opt1CALC[j+1]){
               if(opt1input[j] > opt1input[j+1]){
                  swap(&opt1input[j], &opt1input[j+1]);
                  swap(&opt1CALC[j], &opt1CALC[j+1]); 
               }
           }
       }
}

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort2(int opt2input[], int opt2CALC[] ,int size)
{
   int i, j;
   for (i = 0; i < size - 1; i++)      
  
       // Last i elements are already in place   
       for (j = 0; j < size - i-1; j++)
       {
           if (opt2CALC[j] > opt2CALC[j+1])
           {
              swap(&opt2input[j], &opt2input[j+1]);
              swap(&opt2CALC[j], &opt2CALC[j+1]);
           }
           else if(opt2CALC[j] == opt2CALC[j+1]){
               if(opt2input[j] > opt2input[j+1]){
                  swap(&opt2input[j], &opt2input[j+1]);
                  swap(&opt2CALC[j], &opt2CALC[j+1]); 
               }
           }
       }
}


int count1(int n)
{
    int c=0;
    while(n >1)
    {
        if(n % 2 == 0) 
        {
            n = n / 2;
        }
        else 
        {
            n = (n * 3)+1;
        }
        c++;
    }
    return c;
}

bool isPowerOfTwo(int n)
{
  if (n == 0)
    return 0;
  while (n != 1)
  {
      if (n % 2 != 0)
         return 0;
      n = n/2;
  }
  return 1;
}

int power(int n)
{
    int POWER = 0;
    while(n >1)
    {
        n /= 2;
        POWER += 1;
    }
    return POWER;
}

int count2(int n, int bo, int POWER)
{
    int c = 0;
    bool po;
    int pof;
    
    while(n > 1)
    {
        if(n % 2 == 0)
        { 
            n = n / 2;
            po = bo;
            if(po==1)
            {
                pof = POWER;                                                                                                                                                                    break;
            }
        }
        else 
        {
            n = (n * 3) + 1;
        }
        c++;
    }
    return pof;
}


