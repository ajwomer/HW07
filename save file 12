#include <stdio.h>
 //#include <stdbool.h>
 //#include <stdlib.h>
 #include <math.h>
 #define SIZE 35

 int getSortOption(); //retrieves the input for the sorting option 
 int getArray(int, int opt1input[SIZE], int opt2input[SIZE]); //retrieves and stores the elements from the input array
 void option1CALC(int opt1input[SIZE], int);
 void option2CALC(int opt2input[SIZE], int);

 int main()
 {
     //Declarations
     int sortoption; //input for the sorting option from user input 
     int size; //number of elements in the input array 
     int opt1input[SIZE];
     int opt2input[SIZE];
     int opt1CALC[SIZE];
     int opt2CALC[SIZE];
     int index; 
     int temp;
     int applications1; //number of times the calculation is performed for option 1
     int applications2; //number of times the calculation is performed for option 2
     int possible;
     int POWER;

     //Input Section
     sortoption = getSortOption(); //retrieves the input for the sorting option
     size = getArray(sortoption, opt1input, opt2input); //retrieves and stores the elements from the input array

     //Calculation Section
     if(sortoption == 1)
     {
         option1CALC(opt1input, size);
     }
     
     else if(sortoption == 2)
     {
         option2CALC(opt2input, size);
     }
     return 0;
 }

 int getSortOption(int sortoption)
 {
     int option; //local variable for the sorting option input 

     do
     { 
         printf("Enter sorting option (1) count or (2) power of two -> ");
         scanf("%d", &option);

         if (option != 1 && option != 2)
         {
             printf("\nError! Enter option 1 or 2 only!\n\n");
         }
     } while (option != 1 && option != 2);

     sortoption = option;
     return(sortoption);
 }

 //FUNCTION HEADER - getArray
 int getArray(int sortoption, int opt1input[SIZE], int opt2input[SIZE])
 {
     int index; //local variable used for indexing
     int x; //local variable used for indexing
     int size; //local variable used for determining the size of the input array 
     size = 35;

     printf("Enter up to 35 integer values -> ");

     switch(sortoption)
     {
     case 1:
     {
     for(index = 0; index < 35; ++index)
     {
         scanf("%d", &x);
         if (x < 0)
         {
             size = index;
             index = 50;
         }
         opt1input[index] = x;
     }
     break;
     }

     case 2:
     {
     for(index = 0; index < 35; ++index)
     {
         scanf("%d", &x);
         if (x < 0)
         {
             size = index;
             index = 50;
         }
         opt2input[index] = x;
     }
     }
     }

     return(size);
 }

void option1CALC(int opt1input[SIZE], int size)
 {
     int applications1; //local variable that represents the number of times the calculation was performed
     int element; //local variable that represents the specific element of the array
     int index; //local variable used for indexing the loops
     int counter;
     int i;
     int j;
     int temp;
     int temporary;
     int t;
     int Temp;
     //int opt1input[SIZE];
     int opt1CALC[SIZE];
     applications1 = 0;

     for(counter = 0; counter < size; ++counter)
     {  
         applications1 = 0;
         element = opt1input[counter];
     while(element > 1 && counter < size) //is the calculation greater than 1?
     {
         if(element % 2 == 0) //is the element even?
         {
             element = element / 2;
         }
         else //is the element odd?
         {
             element = (element * 3) + 1;
         }

         applications1++;
     }
         temp = applications1;
         opt1CALC[counter] = temp;
     }

     //from bubble sort 1
     for (i = 0; i < size; i++)      
     {
        // Last i elements are already in place   
        for (j = 0; j < size - i - 1; j++)
        {
            if (opt1CALC[j] > opt1CALC[j + 1])
            {
               temp = opt1input[j];
               opt1input[j] = opt1input[j + 1];
               opt1input[j + 1] = temp;

               temporary = opt1CALC[j];
               opt1CALC[j] = opt1CALC[j + 1];
               opt1CALC[j + 1] = temporary;
            }

            else if(opt1CALC[j] == opt1CALC[j + 1])
            {
                if(opt1input[j] > opt1input[j + 1])
                {
                   t = opt1input[j];
                   opt1input[j] = opt1input[j + 1];
                   opt1input[j + 1] = t;

                   Temp = opt1CALC[j];
                   opt1CALC[j] = opt1CALC[j + 1];
                   opt1CALC[j + 1] = Temp;

                }
            }
        }
    }

   printf("Sorted data by count: ");
 for (i= 0; i < size; i++)
 {
 printf("%d ", opt1input[i]);
 }
 printf("\n");
     return;
 }
 
//FUNCTION HEADER - option2CALC 
void option2CALC(int opt2input[SIZE], int size)
 {
     int i; //local variable used for indexing the loop 
     int element; //local variable that represents the element in the array
     int possible;
     int ans; //local variable that represents the element in the array
     int POWER;
     int j;
     int temp;
     int po;
     int stop;
     int temporary;
     int t;
     int applications2;
     int index;
     POWER = 0;
     int Temp;
     int change;
     int opt2CALC[SIZE];
    
     for(i = 0; i < size; ++i)
     {  
         element = opt2input[i];
         POWER = 0;
            while(element > 1) 
            {
            if(element % 2 == 0) //if even
            { 
             element = element / 2;
             change = element;
             while(change > 1 && (change % 2 == 0))
                {
                change = change / 2;
                if(change == 1)
                {
                    POWER = element * 2;
                    element = 0;
                }
                }
            }
    
            else //if odd
            {
             element = (element * 3) + 1;
             change = element;
             while(change > 1 && (change % 2 == 0))
                {
                change = change / 2;
                if(change == 1)
                {
                    POWER = element;// * 2;
                    element = 0;
                }
                }
            }
            }
                printf("POWER = %d\t", POWER);
                opt2CALC[i] = POWER;
    }

 //from bubble sort 2
    for (i = 0; i < size; i++)      
    {
        // Last i elements are already in place   
        for (j = 0; j < size - i - 1; j++)
        {
            if (opt2CALC[j] > opt2CALC[j + 1])
            {
               temp = opt2input[j];
               opt2input[j] = opt2input[j + 1];
               opt2input[j + 1] = temp;

               temporary = opt2CALC[j];
               opt2CALC[j] = opt2CALC[j + 1];
               opt2CALC[j + 1] = temp;
            }

            else if(opt2CALC[j] == opt2CALC[j + 1])
            {
                if(opt2input[j] > opt2input[j + 1])
                {
                   t = opt2input[j];
                   opt2input[j] = opt2input[j + 1];
                   opt2input[j + 1] = t;

                   Temp = opt2CALC[j];
                   opt2CALC[j] = opt2CALC[j + 1];
                   opt2CALC[j + 1] = Temp;

                }
            }
        }
    }
    
    printf("Sorted data by power of two: ");
    for (i= 0; i < size; i++)
    {
    printf("%d ", opt2input[i]);
    }
    printf("\n");
    return;
 }
